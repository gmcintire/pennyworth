{"name":"Pennyworth","body":"> **Bruce Wayne:** Rebuild it. Just the way it was, brick for brick.\r\n>\r\n> **Alfred Pennyworth:** _Just_ the way it was, sir?\r\n>\r\n> **Bruce Wayne:** Yeah. Why?\r\n>\r\n> **Alfred Pennyworth:** I thought this might be a good opportunity for improving the foundations.\r\n\r\n### Objective\r\nBased upon the principles of continuous integration, pennyworth will help you build assets for any software you use and provides a reasonable means to distribute it throughout your nodes. By using a well tested package management system under the hood for deployment, you can easily roll back versions and manage node level conflicts.\r\n\r\nJenkins can be configured to search for feature branches, for advanced workflows. Weâ€™ve included some examples for basic branch tracking.\r\n\r\nMany example data bags are included that show how to test, build and package a variety of projects, including Ruby and Clojure projects.\r\n\r\n### Explore\r\nYou can try out Pennyworth using either chef-librarian or vagrant. See the project readme for further information.\r\n\r\n``` git clone git://github.com/heavywater/pennyworth ```\r\n\r\nA quickstart guide from the author is also [available](http://junglist.gen.nz/blog/2011/11/16/pennyworth-quick-start/) to help you get started.\r\n\r\n### Authors\r\nAJ Christensen [aj@junglist.gen.nz](mailto:aj@junglist.gen.nz)\r\n\r\n### Support\r\nHeavy Water Software [support@hw-ops.com](mailto:support@hw-ops.com)","tagline":"pennyworth is a continuous packaging system built around Opscode's Chef, Jenkins and the fpm packaging tool","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}